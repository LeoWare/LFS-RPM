FIX:

+ /usr/bin/rm -rf /mnt/lfs/usr/src/Octothorpe/BUILDROOT/tools-gcc-pass-2-7.3.0-1.x86_64
+ exit 0
Preparing...                          ########################################
	file /tools/lib/libcc1.so.0.0.0 from install of tools-gcc-pass-2-7.3.0-1.x86_64 conflicts with file from package tools-gcc-pass-1-7.3.0-1.x86_64
	file /tools/lib/libstdc++.a from install of tools-gcc-pass-2-7.3.0-1.x86_64 conflicts with file from package tools-libstdc-7.3.0-1.x86_64
	file /tools/lib/libstdc++.so.6.0.24 from install of tools-gcc-pass-2-7.3.0-1.x86_64 conflicts with file from package tools-libstdc-7.3.0-1.x86_64
	file /tools/lib/libstdc++fs.a from install of tools-gcc-pass-2-7.3.0-1.x86_64 conflicts with file from package tools-libstdc-7.3.0-1.x86_64
	file /tools/lib/libsupc++.a from install of tools-gcc-pass-2-7.3.0-1.x86_64 conflicts with file from package tools-libstdc-7.3.0-1.x86_64
Preparing...                          ########################################
Updating / installing...
tools-gcc-pass-2-7.3.0-1              ########################################

What exactly are these messages about? I don't recall seeing them before.

dmesg | grep 'used greatest stack depth'

Code:

[    0.132082] kworker/u16:0 (42) used greatest stack depth: 14040 bytes left
[    1.056243] kworker/u16:5 (1235) used greatest stack depth: 13016 bytes left
[    1.701475] systemd-fstab-g (1259) used greatest stack depth: 12840 bytes left
[   10.345022] systemd-udevd (2024) used greatest stack depth: 11696 bytes left

You have stack instrumentation turned on in your kernel. These are benign until you hit 0 stack.

It's enabled by CONFIG_DEBUG_STACK_USAGE in the debug options in your kernel config.

Load LOOP kernel module

enable info files
rm -rf %{buildroot}/usr/share/info/dir
%post
	pushd /usr/share/info
	rm -v dir
	for f in *
		do install-info $f dir 2>/dev/null
	done
	popd


Change optimization flags:
%define		_optflags	-march=x86-64 -mtune=generic -O2 -pipe -fPIC


Move configure file to filesystem

Allow post processing by rpmbuild

NON-STANDARD
procps-ng

#	RPM add user
Requires(pre): /usr/sbin/useradd, /usr/bin/getent
Requires(postun): /usr/sbin/userdel

%pre
/usr/bin/getent group myservice || /usr/sbin/groupadd -r myservice
/usr/bin/getent passwd myservice || /usr/sbin/useradd -r -d /path/to/program -s /sbin/nologin myservice

%postun
/usr/sbin/userdel myservice

#	Grub install
	This is one way to install grub,
	You will need to edit the set root=(hdx,x) and
	root=/dev/sdxx lines to suit.
	If you don't have a boot partition you will need to
	change: linux /vmlinuz-<VERSION> root=/dev/sdxx ro
	to:	linux /boot/vmlinux-<VERSION> root=/dev/sdxx> ro

	grub-install --boot-directory=/mnt/lfs/boot /dev/sda

	cat > /boot/grub/grub.cfg << "EOF"
	# Begin /boot/grub/grub.cfg
	set default=0
	set timeout=5
	insmod ext2
	#	change hdx,x to the correct value
	set root=(hdx,x)
	menuentry "GNU/Linux Linux from scratch" {
		linux /boot/vmlinuz-<VERSION> root=</dev/sdxx ro
	 }
	# 	Uncomment this if you have Win what-ever installed
	#	change set root=(hdx,x) to where you have win installed
	#	set root=(hd0,1) usually
 	#menuentry "Windows" {
	#	insmod ntfs
	#	set root=(hdx,x)
	#	chainloader +1
	# }
	# End /boot/grub/grub.cfg
	 EOF


find "${RPM_BUILD_ROOT}" -not -type d -print > filelist.rpm
sed -i "s|^${RPM_BUILD_ROOT}||" filelist.rpm
sed -i '/man/d' filelist.rpm
sed -i '/\/usr\/share\/info/d' filelist.rpm
